// a, i are on stack
// b is in static memory

// a[i] = b + 1

=
    ind +
        + Ca Rsp
        ind + Ci Rsp
    + Mb C1

// R: { C, ind, +, = }
// M: { = }
// 
// 
// R -> C {
//     R.value = newReg
//     emit "LD " R.value ", #" C.value
// }
// 
// R -> M {
//     R.value = newReg
//     emit "LD " R.value ", " M.value
// }
// 
// R$1 -> (ind (+ C R$2)) {
//     $1.value = newReg
//     emit "LD R" $1.value ", " C.value "(R" $2.value ")"
// }
// 
// R$1 -> (+ (R$2 (ind (+ C R$3)))) {
//     $1.value = $2.value
//     emit "ADD R" $1.value ", R" $2.value ", " C.value "(R" $3.value ")"
// }
// 
// R$1 -> (+ R$2 R$3) {
//     $1.value = $2.value
//     emit "ADD R" $1.value ", R" $2.value ", R" $3.value
// }
// 
// R$1 -> (+ R$2 C) [C.value == 1] {
//     $1.value = $2.value
//     emit "INC R" $1.value
// }
// 
// M -> (= M$1 R) {
//     emit "ST " $1.value ", " R" R.value
// }
// 
// M -> (= (ind R$1) R$2) {
//     emit "ST *R" $1.value ", R" $2.value
// }